import 'dart:math';

import 'package:flutter/material.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/widgets.dart';
import 'package:provider/provider.dart';

import 'backend.dart';
import 'settings.dart';
import 'statistics.dart';

// TODO maybe https://riverpod.dev/ would be a better state management solution?
// https://pub.dev/packages/get is also interesting

void main() {
  // debugPaintPointersEnabled = true;
  // debugPaintSizeEnabled = true;
  // debugPaintLayerBordersEnabled = true;

  runApp(ChangeNotifierProvider(
    create: (context) => AppState(),
    child: ParrotTrainerApp(),
  ));
}

class ParrotTrainerApp extends StatefulWidget {
  @override
  _ParrotTrainerAppState createState() => _ParrotTrainerAppState();
}

class _ParrotTrainerAppState extends State<ParrotTrainerApp> {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      theme: ThemeData(canvasColor: Colors.black, cardColor: Colors.grey.shade900),
      home: Scaffold(
        body: SafeArea(
          child: Consumer<AppState>(builder: (context, state, child) {
            return state.settingsPanelVisible
                ? SettingsPanel(state)
                : Column(
                    crossAxisAlignment: CrossAxisAlignment.stretch,
                    children: [PlayArea(state), StatisticsPanel(state)],
                  );
          }),
        ),
      ),
    );
  }
}

class PlayArea extends StatelessWidget {
  final AppState state;
  const PlayArea(this.state, {Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    var rng = Random(AppState.randomSeed);
    return Listener(
      onPointerDown: (_) {
        // execute only if there was no other pointer event executed recently (generated by a target)
        // this prevents multiple events in a short succession or registering an event behind a target shape.
        if (state.inputAllowed) state.executeConsequence(state.backgroundConsequence);
      },
      child: AspectRatio(
        aspectRatio: 1.0,
        child: Container(
          color: state.backgroundColor,
          child: state.playAreaVisible
              ? GridView.count(
                  physics: NeverScrollableScrollPhysics(), // to prevent scrolling
                  crossAxisCount: 3,
                  children: [
                    for (var t in state.targets)
                      Transform.translate(
                        offset: Offset(
                          (rng.nextDouble() - 0.5) * state.positionNoise * 25.0,
                          (rng.nextDouble() - 0.5) * state.positionNoise * 25.0,
                        ),
                        child: TouchTarget(state, t),
                      )
                  ],
                )
              : null,
        ),
      ),
    );
  }
}

class TouchTarget extends StatelessWidget {
  final AppState state;
  final TargetConfig target;
  const TouchTarget(this.state, this.target, {Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Center(
      child: Listener(
        onPointerDown: (_) {
          if (state.inputAllowed) state.executeConsequence(target.consequence);
        },
        child: ConstrainedBox(
          constraints: BoxConstraints(minWidth: target.shapeSize * 40, minHeight: target.shapeSize * 40),
          child: Container(
              color: target.shapeColor.color,
              child: UnconstrainedBox(
                child: target.alpha > 0
                    ? SizedBox(
                        width: state.targetSize * 10,
                        height: state.targetSize * 10,
                        child: Container(
                          decoration: BoxDecoration(
                            shape: BoxShape.circle,
                            color: (target.shapeColor == ShapeColor.black ? Colors.white : Colors.black)
                                .withAlpha(alphaValues[target.alpha]),
                          ),
                        ),
                      )
                    : null,
              )),
        ),
      ),
    );
  }
}
